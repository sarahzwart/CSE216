{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\nickm\\\\CSE-216\\\\cse216-2023fa-team-6\\\\web\\\\src\\\\Tutorial-Features\\\\Counter.tsx\";\nimport * as React from 'react';\n\n/** The Counter component allows the user to interact with local state */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Counter extends React.Component {\n  constructor(...args) {\n    super(...args);\n    /**\r\n     * It is tempting to create our state by assigning fields to the `Counter`\r\n     * type.  In React, that doesn't work.  We need a special `state` variable,\r\n     * and we need to put all our fields in it.\r\n     */\n    this.state = {\n      num: 0\n    };\n    /**\r\n     * increment the number that is stored in the state\r\n     *\r\n     * NB: When we want a button in JSX to call methods of our component, they\r\n     *     will not know what `this` means. The easiest workaround is to define\r\n     *     the method as a lambda, using the `=>` syntax.\r\n     */\n    this.increment = _e => {\n      // NB: setState will patch the state by updating any fields that are\n      //     defined in the object that it is given.\n      this.setState({\n        num: ++this.state.num\n      });\n    };\n  }\n  /**\r\n   * Render the component.  We use one-way binding to display the current\r\n   * value, and we use one-way binding to connect the button's click handler\r\n   * to a lambda in this class\r\n   */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The current value is \", this.state.num, \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \" Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this);\n  }\n}\n;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Counter","Component","constructor","args","state","num","increment","_e","setState","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["C:/users/nickm/CSE-216/cse216-2023fa-team-6/web/src/Tutorial-Features/Counter.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\n/** The Counter component allows the user to interact with local state */\r\nexport class Counter extends React.Component {\r\n    /**\r\n     * It is tempting to create our state by assigning fields to the `Counter`\r\n     * type.  In React, that doesn't work.  We need a special `state` variable,\r\n     * and we need to put all our fields in it.\r\n     */\r\n    state = { num: 0 }\r\n\r\n    /**\r\n     * increment the number that is stored in the state\r\n     *\r\n     * NB: When we want a button in JSX to call methods of our component, they\r\n     *     will not know what `this` means. The easiest workaround is to define\r\n     *     the method as a lambda, using the `=>` syntax.\r\n     */\r\n    increment = (_e: React.MouseEvent<HTMLButtonElement>) => {\r\n        // NB: setState will patch the state by updating any fields that are\r\n        //     defined in the object that it is given.\r\n        this.setState({ num: ++this.state.num });\r\n    }\r\n\r\n    /**\r\n     * Render the component.  We use one-way binding to display the current\r\n     * value, and we use one-way binding to connect the button's click handler\r\n     * to a lambda in this class\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>The current value is {this.state.num}.</p>\r\n                <button onClick={this.increment}> Update</button>\r\n            </div>\r\n        );\r\n    }\r\n};"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,OAAO,SAASH,KAAK,CAACI,SAAS,CAAC;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IACzC;AACJ;AACA;AACA;AACA;IAJI,KAKAC,KAAK,GAAG;MAAEC,GAAG,EAAE;IAAE,CAAC;IAElB;AACJ;AACA;AACA;AACA;AACA;AACA;IANI,KAOAC,SAAS,GAAIC,EAAuC,IAAK;MACrD;MACA;MACA,IAAI,CAACC,QAAQ,CAAC;QAAEH,GAAG,EAAE,EAAE,IAAI,CAACD,KAAK,CAACC;MAAI,CAAC,CAAC;IAC5C,CAAC;EAAA;EAED;AACJ;AACA;AACA;AACA;EACII,MAAMA,CAAA,EAAG;IACL,oBACIV,OAAA;MAAAW,QAAA,gBACIX,OAAA;QAAAW,QAAA,GAAG,uBAAqB,EAAC,IAAI,CAACN,KAAK,CAACC,GAAG,EAAC,GAAC;MAAA;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eAC7Cf,OAAA;QAAQgB,OAAO,EAAE,IAAI,CAACT,SAAU;QAAAI,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAEd;AACJ;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}