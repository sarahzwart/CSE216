{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\nickm\\\\CSE-216\\\\cse216-2023fa-team-6\\\\web\\\\src\\\\Tutorial-Features\\\\TwoWay.tsx\";\nimport * as React from 'react';\n\n/** Enforce type-checking of the state for our component */\n\n/** Declare that the component does not have any properties */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * Demonstrate two-way binding by having the component state match the value of\r\n * an input box */\nexport class TwoWay extends React.Component {\n  constructor(...args) {\n    super(...args);\n    /** State will consist of a single string */\n    this.state = {\n      name: \"\"\n    };\n    /**\r\n     * This lambda will run any time its associated input element changes.  Its\r\n     * job is to update the state with the value of the input element.\r\n     */\n    this.handleChange = e => {\n      this.setState({\n        name: e.target.value\n      });\n    };\n  }\n  /** Render the component */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The value is \", \"{\", \" \", this.state.name, \" \", \"}\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: this.handleChange,\n        value: this.state.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  }\n}\n;","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","TwoWay","Component","constructor","args","state","name","handleChange","e","setState","target","value","render","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange"],"sources":["C:/users/nickm/CSE-216/cse216-2023fa-team-6/web/src/Tutorial-Features/TwoWay.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\n/** Enforce type-checking of the state for our component */\r\ntype TwoWayState = { name: string };\r\n\r\n/** Declare that the component does not have any properties */\r\ntype TwoWayProps = undefined;\r\n\r\n/**\r\n * Demonstrate two-way binding by having the component state match the value of\r\n * an input box */\r\nexport class TwoWay extends React.Component<TwoWayProps, TwoWayState> {\r\n    /** State will consist of a single string */\r\n    state = { name: \"\" }\r\n\r\n    /**\r\n     * This lambda will run any time its associated input element changes.  Its\r\n     * job is to update the state with the value of the input element.\r\n     */\r\n    handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ name: e.target.value });\r\n    }\r\n\r\n    /** Render the component */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>The value is {\"{\"} {this.state.name} {\"}\"}</p>\r\n                <input type=\"text\" onChange={this.handleChange} value={this.state.name} />\r\n            </div>\r\n        );\r\n    }\r\n};"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;;AAGA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAGA;AACA;AACA;AACA,OAAO,MAAMC,MAAM,SAASH,KAAK,CAACI,SAAS,CAA2B;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAClE;IAAA,KACAC,KAAK,GAAG;MAAEC,IAAI,EAAE;IAAG,CAAC;IAEpB;AACJ;AACA;AACA;IAHI,KAIAC,YAAY,GAAIC,CAAsC,IAAK;MACvD,IAAI,CAACC,QAAQ,CAAC;QAAEH,IAAI,EAAEE,CAAC,CAACE,MAAM,CAACC;MAAM,CAAC,CAAC;IAC3C,CAAC;EAAA;EAED;EACAC,MAAMA,CAAA,EAAG;IACL,oBACIZ,OAAA;MAAAa,QAAA,gBACIb,OAAA;QAAAa,QAAA,GAAG,eAAa,EAAC,GAAG,EAAC,GAAC,EAAC,IAAI,CAACR,KAAK,CAACC,IAAI,EAAC,GAAC,EAAC,GAAG;MAAA;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACjDjB,OAAA;QAAOkB,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAE,IAAI,CAACZ,YAAa;QAACI,KAAK,EAAE,IAAI,CAACN,KAAK,CAACC;MAAK;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC;EAEd;AACJ;AAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}