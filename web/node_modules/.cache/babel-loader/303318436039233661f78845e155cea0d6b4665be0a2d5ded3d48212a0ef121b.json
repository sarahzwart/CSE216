{"ast":null,"code":"import _classCallCheck from\"C:/Users/nickm/CSE-216/cse216-2023fa-team-6/web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/nickm/CSE-216/cse216-2023fa-team-6/web/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"C:/Users/nickm/CSE-216/cse216-2023fa-team-6/web/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/Users/nickm/CSE-216/cse216-2023fa-team-6/web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import*as React from'react';/**\r\n * We want everything to be strongly typed, so let's start by declaring a type\r\n * for the properties that our Hello component will use.\r\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";/**\r\n * Declare our component as a class, so that TypeScript can make sure the\r\n * properties are type-checked.\r\n */export var Add_Edit=/*#__PURE__*/function(_React$Component){_inherits(Add_Edit,_React$Component);var _super=_createSuper(Add_Edit);function Add_Edit(){_classCallCheck(this,Add_Edit);return _super.apply(this,arguments);}_createClass(Add_Edit,[{key:\"render\",value:/**\r\n     * The render function will return a JSX element.  In the jsx, we use the\r\n     * \"{}\" syntax to read fields of the Hello class, using \"one-way\" binding.\r\n     */function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{id:\"addElement\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Add a New Entry\"}),/*#__PURE__*/_jsx(\"label\",{children:\"Title\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"newTitle\"}),/*#__PURE__*/_jsx(\"label\",{children:\"Message\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"newMessage\"}),/*#__PURE__*/_jsx(\"button\",{id:\"addButton\",children:\"Add\"}),/*#__PURE__*/_jsx(\"button\",{id:\"addCancel\",children:\"Cancel\"})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"editElement\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Edit an Entry\"}),/*#__PURE__*/_jsx(\"label\",{children:\"Title\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"editTitle\"}),/*#__PURE__*/_jsx(\"label\",{children:\"Message\"}),/*#__PURE__*/_jsx(\"textarea\",{id:\"editMessage\"}),/*#__PURE__*/_jsx(\"span\",{id:\"editCreated\"}),/*#__PURE__*/_jsx(\"input\",{type:\"hidden\",id:\"editId\"}),/*#__PURE__*/_jsx(\"button\",{id:\"editButton\",children:\"Update\"}),/*#__PURE__*/_jsx(\"button\",{id:\"editCancel\",children:\"Cancel\"})]}),/*#__PURE__*/_jsxs(\"div\",{id:\"showElements\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"All Messages\"}),/*#__PURE__*/_jsx(\"button\",{id:\"showFormButton\",children:\"Add Message\"}),/*#__PURE__*/_jsx(\"div\",{id:\"messageList\"})]})]});}}]);return Add_Edit;}(React.Component);/** This is how we declare default values for the properties */Add_Edit.defaultProps={message:\"World\"};","map":{"version":3,"names":["React","jsx","_jsx","jsxs","_jsxs","Add_Edit","_React$Component","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","render","children","id","type","Component","defaultProps","message"],"sources":["C:/users/nickm/CSE-216/cse216-2023fa-team-6/web/src/Test-Features/Add_Edit.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\n/**\r\n * We want everything to be strongly typed, so let's start by declaring a type\r\n * for the properties that our Hello component will use.\r\n */\r\ntype Add_EditProps = undefined;\r\n\r\n\r\n/**\r\n * Declare our component as a class, so that TypeScript can make sure the\r\n * properties are type-checked.\r\n */\r\nexport class Add_Edit extends React.Component<Add_EditProps> {\r\n    /** This is how we declare default values for the properties */\r\n    static defaultProps = { message: \"World\" };\r\n\r\n    /**\r\n     * The render function will return a JSX element.  In the jsx, we use the\r\n     * \"{}\" syntax to read fields of the Hello class, using \"one-way\" binding.\r\n     */\r\n    render() { return  (<div>\r\n                            <div id=\"addElement\">\r\n                                <h3>Add a New Entry</h3>\r\n                                <label>Title</label>\r\n                                <input type=\"text\" id=\"newTitle\" />\r\n                                <label>Message</label>\r\n                                <textarea id=\"newMessage\"></textarea>\r\n                                <button id=\"addButton\">Add</button>\r\n                                <button id=\"addCancel\">Cancel</button>\r\n                            </div>\r\n                            <div id=\"editElement\">\r\n                                <h3>Edit an Entry</h3>\r\n                                <label>Title</label>\r\n                                <input type=\"text\" id=\"editTitle\" />\r\n                                <label>Message</label>\r\n                                <textarea id=\"editMessage\"></textarea>\r\n                                <span id=\"editCreated\"></span>\r\n                                <input type=\"hidden\" id=\"editId\" />\r\n                                <button id=\"editButton\">Update</button>\r\n                                <button id=\"editCancel\">Cancel</button>\r\n                            </div>\r\n                            <div id=\"showElements\">\r\n                                <h3>All Messages</h3>\r\n                                <button id=\"showFormButton\">Add Message</button>\r\n                                <div id=\"messageList\"></div>\r\n                            </div>\r\n                        </div>\r\n                        );\r\n                }\r\n}"],"mappings":"ogBAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B;AACA;AACA;AACA,GAHA,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,IAAA,IAAAC,KAAA,yBAOA;AACA;AACA;AACA,GACA,UAAa,CAAAC,QAAQ,uBAAAC,gBAAA,EAAAC,SAAA,CAAAF,QAAA,CAAAC,gBAAA,MAAAE,MAAA,CAAAC,YAAA,CAAAJ,QAAA,WAAAA,SAAA,EAAAK,eAAA,MAAAL,QAAA,SAAAG,MAAA,CAAAG,KAAA,MAAAC,SAAA,GAAAC,YAAA,CAAAR,QAAA,GAAAS,GAAA,UAAAC,KAAA,CAIjB;AACJ;AACA;AACA,OACI,SAAAC,OAAA,CAAS,CAAE,mBAASZ,KAAA,QAAAa,QAAA,eACIb,KAAA,QAAKc,EAAE,CAAC,YAAY,CAAAD,QAAA,eAChBf,IAAA,OAAAe,QAAA,CAAI,iBAAe,CAAI,CAAC,cACxBf,IAAA,UAAAe,QAAA,CAAO,OAAK,CAAO,CAAC,cACpBf,IAAA,UAAOiB,IAAI,CAAC,MAAM,CAACD,EAAE,CAAC,UAAU,CAAE,CAAC,cACnChB,IAAA,UAAAe,QAAA,CAAO,SAAO,CAAO,CAAC,cACtBf,IAAA,aAAUgB,EAAE,CAAC,YAAY,CAAW,CAAC,cACrChB,IAAA,WAAQgB,EAAE,CAAC,WAAW,CAAAD,QAAA,CAAC,KAAG,CAAQ,CAAC,cACnCf,IAAA,WAAQgB,EAAE,CAAC,WAAW,CAAAD,QAAA,CAAC,QAAM,CAAQ,CAAC,EACrC,CAAC,cACNb,KAAA,QAAKc,EAAE,CAAC,aAAa,CAAAD,QAAA,eACjBf,IAAA,OAAAe,QAAA,CAAI,eAAa,CAAI,CAAC,cACtBf,IAAA,UAAAe,QAAA,CAAO,OAAK,CAAO,CAAC,cACpBf,IAAA,UAAOiB,IAAI,CAAC,MAAM,CAACD,EAAE,CAAC,WAAW,CAAE,CAAC,cACpChB,IAAA,UAAAe,QAAA,CAAO,SAAO,CAAO,CAAC,cACtBf,IAAA,aAAUgB,EAAE,CAAC,aAAa,CAAW,CAAC,cACtChB,IAAA,SAAMgB,EAAE,CAAC,aAAa,CAAO,CAAC,cAC9BhB,IAAA,UAAOiB,IAAI,CAAC,QAAQ,CAACD,EAAE,CAAC,QAAQ,CAAE,CAAC,cACnChB,IAAA,WAAQgB,EAAE,CAAC,YAAY,CAAAD,QAAA,CAAC,QAAM,CAAQ,CAAC,cACvCf,IAAA,WAAQgB,EAAE,CAAC,YAAY,CAAAD,QAAA,CAAC,QAAM,CAAQ,CAAC,EACtC,CAAC,cACNb,KAAA,QAAKc,EAAE,CAAC,cAAc,CAAAD,QAAA,eAClBf,IAAA,OAAAe,QAAA,CAAI,cAAY,CAAI,CAAC,cACrBf,IAAA,WAAQgB,EAAE,CAAC,gBAAgB,CAAAD,QAAA,CAAC,aAAW,CAAQ,CAAC,cAChDf,IAAA,QAAKgB,EAAE,CAAC,aAAa,CAAM,CAAC,EAC3B,CAAC,EACL,CAAC,CAEd,CAAC,WAAAb,QAAA,GApCaL,KAAK,CAACoB,SAAS,EACzC,+DADSf,QAAQ,CAEVgB,YAAY,CAAG,CAAEC,OAAO,CAAE,OAAQ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}