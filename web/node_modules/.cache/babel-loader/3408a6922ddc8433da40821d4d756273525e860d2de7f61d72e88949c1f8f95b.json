{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\nickm\\\\CSE-216\\\\cse216-2023fa-team-6\\\\web\\\\src\\\\Tutorial-Features\\\\Url.tsx\";\nimport * as React from 'react';\n\n/**\r\n * As with Hello.tsx, we want properties passed through the route to be strongly \r\n * typed, so we create a type to describe them.\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\r\n * The Properties of this component will have a `match` field, which will give\r\n * us access to the UrlProps\r\n */\nexport class Url extends React.Component {\n  /** When we render this component, we print the argument from the URL */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Url Property Example\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This component can use the last part of the address as a variable by reading it from props.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The argument from the Url is: \", this.props.match.params.num]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Url","Component","render","children","fileName","_jsxFileName","lineNumber","columnNumber","props","match","params","num"],"sources":["C:/users/nickm/CSE-216/cse216-2023fa-team-6/web/src/Tutorial-Features/Url.tsx"],"sourcesContent":["import * as React from 'react'\r\nimport { RouteComponentProps } from \"react-router-dom\";\r\n\r\n/**\r\n * As with Hello.tsx, we want properties passed through the route to be strongly \r\n * typed, so we create a type to describe them.\r\n */\r\ntype UrlProps = { num: string };\r\n\r\n/**\r\n * The Properties of this component will have a `match` field, which will give\r\n * us access to the UrlProps\r\n */\r\nexport class Url extends React.Component<RouteComponentProps<UrlProps>> {\r\n    /** When we render this component, we print the argument from the URL */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Url Property Example</h1>\r\n                <p>\r\n                    This component can use the last part of the address as a\r\n                    variable by reading it from props.\r\n                </p>\r\n                <p>The argument from the Url is: {this.props.match.params.num}</p>\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAG9B;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AAMA;AACA;AACA;AACA;AACA,OAAO,MAAMC,GAAG,SAASH,KAAK,CAACI,SAAS,CAAgC;EACpE;EACAC,MAAMA,CAAA,EAAG;IACL,oBACIH,OAAA;MAAAI,QAAA,gBACIJ,OAAA;QAAAI,QAAA,EAAI;MAAoB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC7BR,OAAA;QAAAI,QAAA,EAAG;MAGH;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJR,OAAA;QAAAI,QAAA,GAAG,gCAA8B,EAAC,IAAI,CAACK,KAAK,CAACC,KAAK,CAACC,MAAM,CAACC,GAAG;MAAA;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC;EAEd;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}