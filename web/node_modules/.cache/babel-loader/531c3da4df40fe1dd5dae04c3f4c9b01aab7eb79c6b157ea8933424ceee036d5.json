{"ast":null,"code":"var _jsxFileName = \"C:\\\\users\\\\nickm\\\\CSE-216\\\\cse216-2023fa-team-6\\\\web\\\\src\\\\Tutorial-Features\\\\GlobalCounter.tsx\";\nimport * as React from 'react';\n\n/**\r\n * The GlobalCounter has two properties: lambdas for getting and setting the\r\n * value\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/** The GlobalCounter component allows the user to interact with global state */\nexport class GlobalCounter extends React.Component {\n  constructor(...args) {\n    super(...args);\n    /** increment the number that is stored in the global state */\n    this.increment = _e => {\n      this.props.setNum(1 + this.props.getNum());\n    };\n  }\n  /**\r\n   * Render the component.  Notice how calls to getNum are one-way bound, but\r\n   * update when the button is clicked. \r\n   */\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"The current value is \", this.props.getNum(), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.increment,\n        children: \" Update\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GlobalCounter","Component","constructor","args","increment","_e","props","setNum","getNum","render","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick"],"sources":["C:/users/nickm/CSE-216/cse216-2023fa-team-6/web/src/Tutorial-Features/GlobalCounter.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\n/**\r\n * The GlobalCounter has two properties: lambdas for getting and setting the\r\n * value\r\n */\r\ntype GlobalCounterProps = {\r\n    getNum: () => number;\r\n    setNum: (num: number) => void;\r\n}\r\n\r\n/** The GlobalCounter component allows the user to interact with global state */\r\nexport class GlobalCounter extends React.Component<GlobalCounterProps> {\r\n    /** increment the number that is stored in the global state */\r\n    increment = (_e: React.MouseEvent<HTMLButtonElement>) => {\r\n        this.props.setNum(1 + this.props.getNum());\r\n    }\r\n\r\n    /**\r\n     * Render the component.  Notice how calls to getNum are one-way bound, but\r\n     * update when the button is clicked. \r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>\r\n                    The current value is {this.props.getNum()}.\r\n                </p>\r\n                <button onClick={this.increment}> Update</button>\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":";AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AASA;AACA,OAAO,MAAMC,aAAa,SAASH,KAAK,CAACI,SAAS,CAAqB;EAAAC,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IACnE;IAAA,KACAC,SAAS,GAAIC,EAAuC,IAAK;MACrD,IAAI,CAACC,KAAK,CAACC,MAAM,CAAC,CAAC,GAAG,IAAI,CAACD,KAAK,CAACE,MAAM,CAAC,CAAC,CAAC;IAC9C,CAAC;EAAA;EAED;AACJ;AACA;AACA;EACIC,MAAMA,CAAA,EAAG;IACL,oBACIV,OAAA;MAAAW,QAAA,gBACIX,OAAA;QAAAW,QAAA,GAAG,uBACsB,EAAC,IAAI,CAACJ,KAAK,CAACE,MAAM,CAAC,CAAC,EAAC,GAC9C;MAAA;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAAC,eACJf,OAAA;QAAQgB,OAAO,EAAE,IAAI,CAACX,SAAU;QAAAM,QAAA,EAAC;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC;EAEd;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}