{"ast":null,"code":"import _classCallCheck from\"C:/Users/nickm/CSE-216/cse216-2023fa-team-6/web/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"C:/Users/nickm/CSE-216/cse216-2023fa-team-6/web/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"C:/Users/nickm/CSE-216/cse216-2023fa-team-6/web/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"C:/Users/nickm/CSE-216/cse216-2023fa-team-6/web/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import*as React from'react';/** The Counter component allows the user to interact with local state */import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";export var Counter=/*#__PURE__*/function(_React$Component){_inherits(Counter,_React$Component);var _super=_createSuper(Counter);function Counter(){var _this;_classCallCheck(this,Counter);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));/**\r\n     * It is tempting to create our state by assigning fields to the `Counter`\r\n     * type.  In React, that doesn't work.  We need a special `state` variable,\r\n     * and we need to put all our fields in it.\r\n     */_this.state={num:0};/**\r\n     * increment the number that is stored in the state\r\n     *\r\n     * NB: When we want a button in JSX to call methods of our component, they\r\n     *     will not know what `this` means. The easiest workaround is to define\r\n     *     the method as a lambda, using the `=>` syntax.\r\n     */_this.increment=function(_e){// NB: setState will patch the state by updating any fields that are\n//     defined in the object that it is given.\n_this.setState({num:++_this.state.num});};return _this;}_createClass(Counter,[{key:\"render\",value:/**\r\n     * Render the component.  We use one-way binding to display the current\r\n     * value, and we use one-way binding to connect the button's click handler\r\n     * to a lambda in this class\r\n     */function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"The current value is \",this.state.num,\".\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:this.increment,children:\" Update\"})]});}}]);return Counter;}(React.Component);;","map":{"version":3,"names":["React","jsxs","_jsxs","jsx","_jsx","Counter","_React$Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","num","increment","_e","setState","_createClass","key","value","render","children","onClick","Component"],"sources":["C:/users/nickm/CSE-216/cse216-2023fa-team-6/web/src/Tutorial-Features/Counter.tsx"],"sourcesContent":["import * as React from 'react'\r\n\r\n/** The Counter component allows the user to interact with local state */\r\nexport class Counter extends React.Component {\r\n    /**\r\n     * It is tempting to create our state by assigning fields to the `Counter`\r\n     * type.  In React, that doesn't work.  We need a special `state` variable,\r\n     * and we need to put all our fields in it.\r\n     */\r\n    state = { num: 0 }\r\n\r\n    /**\r\n     * increment the number that is stored in the state\r\n     *\r\n     * NB: When we want a button in JSX to call methods of our component, they\r\n     *     will not know what `this` means. The easiest workaround is to define\r\n     *     the method as a lambda, using the `=>` syntax.\r\n     */\r\n    increment = (_e: React.MouseEvent<HTMLButtonElement>) => {\r\n        // NB: setState will patch the state by updating any fields that are\r\n        //     defined in the object that it is given.\r\n        this.setState({ num: ++this.state.num });\r\n    }\r\n\r\n    /**\r\n     * Render the component.  We use one-way binding to display the current\r\n     * value, and we use one-way binding to connect the button's click handler\r\n     * to a lambda in this class\r\n     */\r\n    render() {\r\n        return (\r\n            <div>\r\n                <p>The current value is {this.state.num}.</p>\r\n                <button onClick={this.increment}> Update</button>\r\n            </div>\r\n        );\r\n    }\r\n};"],"mappings":"ogBAAA,MAAO,GAAK,CAAAA,KAAK,KAAM,OAAO,CAE9B,gFAAAC,IAAA,IAAAC,KAAA,gCAAAC,GAAA,IAAAC,IAAA,yBACA,UAAa,CAAAC,OAAO,uBAAAC,gBAAA,EAAAC,SAAA,CAAAF,OAAA,CAAAC,gBAAA,MAAAE,MAAA,CAAAC,YAAA,CAAAJ,OAAA,WAAAA,QAAA,MAAAK,KAAA,CAAAC,eAAA,MAAAN,OAAA,UAAAO,IAAA,CAAAC,SAAA,CAAAC,MAAA,CAAAC,IAAA,KAAAC,KAAA,CAAAJ,IAAA,EAAAK,IAAA,GAAAA,IAAA,CAAAL,IAAA,CAAAK,IAAA,IAAAF,IAAA,CAAAE,IAAA,EAAAJ,SAAA,CAAAI,IAAA,GAAAP,KAAA,CAAAF,MAAA,CAAAU,IAAA,CAAAC,KAAA,CAAAX,MAAA,QAAAY,MAAA,CAAAL,IAAA,GAChB;AACJ;AACA;AACA;AACA,OAJIL,KAAA,CAKAW,KAAK,CAAG,CAAEC,GAAG,CAAE,CAAE,CAAC,CAElB;AACJ;AACA;AACA;AACA;AACA;AACA,OANIZ,KAAA,CAOAa,SAAS,CAAG,SAACC,EAAuC,CAAK,CACrD;AACA;AACAd,KAAA,CAAKe,QAAQ,CAAC,CAAEH,GAAG,CAAE,EAAEZ,KAAA,CAAKW,KAAK,CAACC,GAAI,CAAC,CAAC,CAC5C,CAAC,QAAAZ,KAAA,EAAAgB,YAAA,CAAArB,OAAA,GAAAsB,GAAA,UAAAC,KAAA,CAED;AACJ;AACA;AACA;AACA,OACI,SAAAC,OAAA,CAAS,CACL,mBACI3B,KAAA,QAAA4B,QAAA,eACI5B,KAAA,MAAA4B,QAAA,EAAG,uBAAqB,CAAC,IAAI,CAACT,KAAK,CAACC,GAAG,CAAC,GAAC,EAAG,CAAC,cAC7ClB,IAAA,WAAQ2B,OAAO,CAAE,IAAI,CAACR,SAAU,CAAAO,QAAA,CAAC,SAAO,CAAQ,CAAC,EAChD,CAAC,CAEd,CAAC,WAAAzB,OAAA,GAjCwBL,KAAK,CAACgC,SAAS,EAkC3C"},"metadata":{},"sourceType":"module","externalDependencies":[]}